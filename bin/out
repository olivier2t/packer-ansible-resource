#!/bin/sh
set -eu -o pipefail
exec 3>&1 1>&2

jq . < /dev/stdin > /tmp/input

SRC=$1

export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // empty' < /tmp/input)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // empty' < /tmp/input)
export AWS_DEFAULT_REGION=$(jq -r '.source.region // empty' < /tmp/input)


TEMPLATE=$(jq -r '.params.template // empty' /tmp/input)
if [ -z "$TEMPLATE" ]; then
  echo "Template file path not provided:" >&2
  jq '.params // {}' /tmp/input >&2
  exit 1
elif [ ! -f "$SRC/$TEMPLATE" ]; then
  echo "Template file $SRC/$TEMPLATE not found" >&2
  exit 1
fi
echo "Using Packer template file $SRC/$TEMPLATE"

PROVISIONER_FILES=$(jq -r '.params.provisioner_files // empty | if type =="array" then .[] else . end' /tmp/input)
for FILE in $FILES; do
  if [ ! -f "$SRC/$FILE" ]; then
    echo "Provisioner file $SRC/$FILE not found" >&2
    exit 1
  fi
  echo "Using provisioner file $SRC/$FILE"
done

ARGS=""
VARS=$(jq -r '.params.vars // empty | if type =="array" then .[] else . end' /tmp/input)
for VAR in $VARS; do
  echo "Using variable $VAR"
  ARGS="$ARGS -var='$VAR'"
done

FILES=$(jq -r '.params.var_files // empty | if type =="array" then .[] else . end' /tmp/input)
for FILE in $FILES; do
  if [ ! -f "$SRC/$FILE" ]; then
    echo "var_file $SRC/$FILE not found" >&2
    exit 1
  else
    ARGS="$ARGS -var-file=$SRC/$FILE"
  fi
done

jq '.params|del(.template,.var_file) // empty' /tmp/input > /tmp/vars.json

cd $(dirname $SRC/$TEMPLATE)

packer validate $ARGS -var-file=/tmp/vars.json $SRC/$TEMPLATE

packer build -machine-readable $ARGS -var-file=/tmp/vars.json $SRC/$TEMPLATE \
  | tee /tmp/output | awk -F, '/,ui,/ { print $5 }' | sed -u 's#%!(PACKER_COMMA)#,#g;s#\\n#\n#g'

IMAGE=$(awk -F: '/artifact,0,id/ { print $2 }' /tmp/output)

echo '{ "version": { "image": "'$IMAGE'" } }' >&3