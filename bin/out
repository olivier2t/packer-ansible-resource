#!/bin/sh
set -eu -o pipefail
exec 3>&1 1>&2

jq . < /dev/stdin > /tmp/input

SRC=$1

TEMPLATE=$(jq -r '.params.template // empty' /tmp/input)
if [ -z "$TEMPLATE" ]; then
  echo "Template file path not provided:" >&2
  jq '.params // {}' /tmp/input >&2
  exit 1
elif [ ! -f "$SRC/$TEMPLATE" ]; then
  echo "Template file $SRC/$TEMPLATE not found" >&2
  exit 1
fi
echo "Using Packer template file $SRC/$TEMPLATE"

PROVISIONER_FILES=$(jq -r '.params.provisioner_files // empty | if type =="array" then .[] else . end' /tmp/input)
for PROVISIONER_FILE in $PROVISIONER_FILES; do
  if [ ! -f "$SRC/$PROVISIONER_FILE" ]; then
    echo "Provisioner file $SRC/$PROVISIONER_FILE not found" >&2
    exit 1
  fi
  echo "Using provisioner file $SRC/$PROVISIONER_FILE"
done

ARGS=""
for var in $(jq -r '.params[] | @base64 // empty' /tmp/input); do
  KEY=$(echo ${var} | base64 --decode | jq -r '. | keys[0]')
  VALUE=$(echo ${var} | base64 --decode | jq -r .${KEY})
  ARGS="$ARGS -var='$KEY=$VALUE'"
done

# jq '.params|del(.template,provisioner_files,.var_files) // empty' /tmp/input > /tmp/vars.json

# VARS=$(jq -r '.params.vars // empty | if type =="array" then .[] else . end' /tmp/input)
# for VAR in $VARS; do
#   echo "Using variable $VAR"
#   ARGS="$ARGS -var='$VAR'"
# done

# VAR_FILES=$(jq -r '.params.var_files // empty | if type =="array" then .[] else . end' /tmp/input)
# for VAR_FILE in $VAR_FILES; do
#   if [ ! -f "$SRC/$VAR_FILE" ]; then
#     echo "var_file $SRC/$VAR_FILE not found" >&2
#     exit 1
#   else
#     ARGS="$ARGS -var-file=$SRC/$VAR_FILE"
#   fi
# done

# jq '.params|del(.template,.var_file) // empty' /tmp/input > /tmp/vars.json

cd $(dirname $SRC/$TEMPLATE)

packer validate $ARGS $SRC/$TEMPLATE
# packer validate $ARGS -var-file=/tmp/vars.json $SRC/$TEMPLATE

packer build -machine-readable $ARGS $SRC/$TEMPLATE \
# packer build -machine-readable $ARGS -var-file=/tmp/vars.json $SRC/$TEMPLATE \
  | tee /tmp/output | awk -F, '/,ui,/ { print $5 }' | sed -u 's#%!(PACKER_COMMA)#,#g;s#\\n#\n#g'

IMAGE=$(awk -F: '/artifact,0,id/ { print $2 }' /tmp/output)
echo "image: $IMAGE"

echo '{ "version": { "image": "'$IMAGE'" } }' >&3